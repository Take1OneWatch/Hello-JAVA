package com.imooc;

public class Animal {
	 int age = 10 ;
	// String name = "小甜甜！";
	 public void name() {
			System.out.println("小甜甜！"); }
	public void eat() {
		System.out.println("陈广峰具有吃东西的能力！");
	}
    public Animal(){ //构造方法！！（构造方法是后面才运行的）
	System.out.println("Animal类执行了！！"); 
	 age = 15;
     }
}


package com.imooc;

public class Dog extends Animal {
	public Dog() {
		System.out.println("Dog类执行了！");
}
	public void eat() {  //其中暗藏隐形的super，调用父类的无参方法，有参的必须明写super
		//super; 写出来的时候必须要放在方法的第一行
		System.out.println("狗具有吃东西的能力！");
	}
	@Override
	public String toString() {
		return "Dog[age="+age+"]"; 
	}
	
	@Override   // equals方法
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Dog other = (Dog) obj;
		if (age != other.age)
			return false;
		return true;
	}
	public void name() {
			System.out.println("小喵喵！"); }
	 public void test() {
		 System.out.println(super.age); //如果没加super就是输出子类的35
		 super.eat();  //调用父类的eat方法！
	 }
	 int age = 35 ;
}



//这是主函数！！
package com.imooc;

public class Initail {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Animal animal =new Animal();//执行Animal中的构造方法！
		System.out.println("animal  age:"+animal.age);
		Dog d =new Dog();
		Dog d2 =new Dog();
		if(d.equals(d2)) {
			System.out.println("两个对象是相同的");
			}else {
				System.out.println("两个对象是不相同的");
			}
/*这一行代码主要是执行了一次Animal中的构造方法，再执行Dog中的构造方法！	
		/*Animal类执行了！！
          Dog类执行了！*/
		System.out.println(d); //利用toString方法直接调用Dog里面的属性！
		d.eat();
		d.test();
	 d.age=50;   //执行父类的属性初始值！ (无效！)
	//	System.out.println("animal name:"+animal.name);
		d.name();
	}
}

//若用final对变量使用之后，就无法再对变量进行赋值！
